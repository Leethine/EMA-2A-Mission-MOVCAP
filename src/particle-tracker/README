### Annotation for Particle filter

#### Note
This is a modification based on Kevin Schluff's implementation in 2012.

Due to the changes of opencv version, multiple modification was made so that the code will work under opencv 4.2

The original text is conserved below: 

====================================================

About
-----

This is an implementation of color/texture based object tracking using a particle filter.  The particle filter is a C++ re-implementation of the Condensation algorithm, with systematic resampling, from OpenCV.  The likleyhood function is based on the Bhattacharya distance between RGB histograms.  Optionally, an additional texture dimension using Local Binary Patterns can be added to the histogram.  This can be helpful when the target is not well differentiated from the background by color. However, in most cases, you can get better results for similar processor utilization by increasing the number of particles.

If the mean state of the tracked object moves off-screen, usually due to having actually lost the target and propagating the position through the constant velocity model, the tracker tries to re-acquire the target.  In a process similar to monte carlo localization with robots, the particles are uniformly distributed across the image area and the filter is allowed to re-converge.  This works quite well in most cases, though sometimes results in false-positives.

Compiling
---------
Just a basic makefile. Should work on any Unix-like system.

Usage
-----

./particle_tracker [-o output_file] [-p num_particles] [-b init_box] [-l] [input_file]

	-o output_file: Optional mjpeg output file
	-p num_particles: Number of particles (samples) to use, default is 200
	-b init_box: Initialisation frame from command line, in condensed opencv format, i.e. "606x394from386p326"
	-l: Use local binary patterns in histogram
	input_file : Optional file to read, otherwise use camera

Dependencies
------------
OpenCV 2.x
